ddply(datos, .(nombres), summarise,)
ddply(datos, .(nombres), summarise)
dataf[,defvals,by=nombres]
dataf=data.table(datos)
dataf
dataf[,defvals,by=nombres]
dataf[,defvals,by=nombres]
defvals=function(x){
summary(as.factor(x))
}
nombres=c("a","a","a","a","b","b","c","c","c")
letra= c("z","z","z","n","n","z","n","n","z")
dataf=data.frame(nombres,letra)
dataf=as.data.table(dataf)
dataf[,defvals,by=nombres]
dataf[,defvals(letra),by=nombres]
install.packages(dummies)
install.packages("dummies")
library(dummies)
dataf[,defvals(letra),by=nombres]
dummy(V1,dataf[,defvals(letra),by=nombres])
dummy("V1",dataf[,defvals(letra),by=nombres])
dummy("letra",dataf[,defvals(letra),by=nombres])
dummy("nombres",dataf[,defvals(letra),by=nombres])
dataf[,levels(letra),by=nombres]
help("reshape")
reshape(datos,varying="letras")
reshape(datos,idvar="nombres",direction="long")
reshape(datos,varying="letras",idvar="nombres",direction="long")
reshape(datos,varying=NULL,idvar="nombres",direction="long")
reshape(datos,varying=,idvar="nombres",direction="wide")
reshape(datos,varying=NULL,idvar="nombres",direction="wide")
reshape(datos,varying="letras",idvar="nombres",direction="wide")
install.packages("reshape")
library(reshape)
cast(datos, nombres~letras, count)
mdata <- melt(datos, id="nombres")
cast(mdata, nombres~letras, count)
mdata
datos
cast(mdata, nombres~value, count)
cast(mdata, nombres~value, count())
cast(mdata, nombres~value, sum)
cast(mdata, nombres~value, summary)
reshape(datos,varying="letras",direction="wide")
reshape(datos,varying="letras",timevar = "letras",direction="wide")
summary.list(datso$letra)
summarise(letras)
summarise(datos)
summary(as.factor(datos))
summary(as.factor(datos$letra))
summary[1]
a = summary(datos$nombres=="a","letras")
a
datos[datos$nombres=="a","letras"]
datos[datos$nombres=="a",]
datos[datos$nombres=="a","letra"]
summary(datos[datos$nombres=="a","letra"])
class(summary(datos[datos$nombres=="a","letra"]))
a=summary(datos[datos$nombres=="a","letra"])
a
a[1]
a[2]
a[1][1]
a[1]
a[[1]]
a[[2]]
a
unlist(a)
list(a)
papas= c("a","b","c")
papas
col1 = summary(datos[datos$nombres=="a","letra"])
col2 = summary(datos[datos$nombres=="b","letra"])
col3 = summary(datos[datos$nombres=="c","letra"])
col3
View(dataf)
z = c(3,1,2)
c= c(1,1,2)
asdf = data.frame(papas,z,c)
View(asdf)
datos
datos=as.data.table(datos)
datos
as.data.frame(datos[,count(letra),by=nombres])
blib=as.data.frame(datos[,count(letra),by=nombres])
blib
as.matrix(blib)
blib=as.data.frame(datos[,count(letra),by=nombres])
blibk
blib
aggregate(blib,by=nombres)
aggregate(blib,by=nombres,fun=count)
aggregate(blib,by=nombres,FUN=count)
aggregate(blib,by="nombres",FUN=count)
aggregate(blib,by=c("nombres"),FUN=count)
aggregate(blib,by=c(nombres),FUN=count)
aggregate(blib,by=list(nombres),FUN=count)
blib
model.matrix( ~ nombres - 1, data=blib )
model.matrix( ~ letras - 1, data=blib )
blib
model.matrix( ~ x - 1, data=blib )
model.matrix( ~ freq - 1, data=blib )
blib
aggregate(blib$nombres, by=list(Category=x$Category), FUN=sum)
aggregate(blib$nombres, by=list(Category=blib$x), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=count)
blib
aggregate(. ~ nombres,freq , FUN=count)
ddply(dd, c("dim1","dim2"), function(df)mean(df$v1))
reshape(blib)
reshape(blib,direction = "wide")
reshape(blib,direction = "wide",varying="x")
reshape(blib,direction = "wide",varying=x)
datos
blyb
blib
View(datos)
View(datos)
datos$nombres
datos$letra
blib
floor(0.5)
floor(0.7)
floor(1.2)
pbinom(1,1,1)
pbinom(10,1,1)
pbinom(0.7,1,1)
pbinom(0.7,0.5,1)
pbinom(0.7,1,0.5)
}
darProba=function(I,O,p,q,N,delta,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
revisarPositiva =function(delta,I,O,p,q){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
}
return(2*delta +sumaI + sumaO)
}
calcularetaO=function(q,N,delta,n)
{
d =floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*2 +2*delta/n))
}
calcularetaO=function(q,N,delta,n)
{
d =floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*q +2*delta/n))
}
calcularetaI=function(p,N,delta,n)
{
floor(d =N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
calcularetaI=function(p,N,delta,n)
{
d=floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
darProba=function(I,O,p,q,N,delta,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
calcularetaI=function(p,N,delta,n){
#d=floor(N*(2*delta+n)/2n)
#probaw = pbinom(d,N,p)
#multi = (1-2*p)
#return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2n)
#probaw = pbinom(d,N,p)
#multi = (1-2*p)
#return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
2/2
2\2
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(pro
baw*(1-2*q +2*delta/n))
}
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*q +2*delta/n))
}
revisarPositiva(1.5,45,45,0.8,0.2)
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
revisarPositiva =function(delta,I,O,p,q,N,n){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
}
return(2*delta +sumaI + sumaO)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
revisarPositiva =function(delta,I,O,p,q,N,n){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
i=i+1
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
j=j+1
}
return(2*delta +sumaI + sumaO)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*q)
return(probaw*(1-2*q +2*delta/n))
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva(delta,I,O,p,q,N,n))^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
revision = revisarPositiva(delta,I,O,p,q,N,n)
if(revision<=0)
{
return("VALORNEGATIVO")
}
valorNum = (2*delta+revision)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
calcularetaI(0.8,3,1.5,10)
calcularetaO(0.2,3,1.5,10)
-0.3*45+0.9*45
darProba(1.5,45,45,0.8,0.2,1,10)
darProba(1.5,45,45,0.7,0.2,1,10)
darProba(1.5,45,45,0.7,0.3,1,10)
darProba(1.5,45,45,0.9,0.3,1,10)
darProba(2,45,45,0.8,0.3,1,10)
darProba(5,45,45,0.8,0.3,1,10)
darProba(1,45,45,0.8,0.3,1,10)
exp(2)
exp(-2*161)
darProba(1.5,45,45,0.8,0.3,1,10)
exp(-85)
mat1 = matrix(runif(200), 10)
mat1 = matrix(runif(100000000),nrow = 10000,ncol = 10000)
mat1=matrix(data = runif(1000000),nrow = 1000,ncol = 1000)
svd(mat1)
mat1=matrix(data = runif(1000000),nrow = 1000,ncol = 1000)
start.time <- Sys.time()
papa=svd(mat1)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
as.binary(4)
install.packages("binaryLogic")
library(binaryLogic)
as.binary(4)
as.binary(2)
as.binary(4) + as.binary(2)
library(binaryLogic)
2^10
randomSubset = runif(n=UpperBound,min = 0,max = 2^10)
UpperBound= 18
randomSubset = runif(n=UpperBound,min = 0,max = 2^10)
help("binaryLogic")
binary(957)
as.binary(957)
randomSubset = runif(n=UpperBound,min = 0,max = 2^10,replace=F)
help(sample)
randomSubset = sample(x=UpperBound,n=UpperBound,replace=F)
randomSubset = sample(x=1024,n=UpperBound,replace=F)
randomSubset = sample(x=1024,size=UpperBound,replace=F)
Binaries = as.binary(randomSubset)
Binaries[1]
randomSubset[1]
as.binary
randomSubset[1]
as.binary(944)
Binaries[1]
sum(Binaries[1])
randoms = unlist(Binaries)
randoms
rm(randoms)
as.array(Binaries)
unlist(x = Binaries,use.names = FALSE)
apply(X = randomSubset,FUN = as.binary)
sapply(X = randomSubset,FUN = as.binary)
lapply(X = randomSubset,FUN = as.binary)
sapply(X = randomSubset,FUN = as.binary)
Binaries[[1]]
Binaries[[1]][1]
Binaries[[1]]
Binaries[1]
sum(Binaries[[1]])
binaries[[1]]
Binaries[[1]]
Binaries[[2]]
Binaries[[2]]+Binaries[[1]]
pruba = sample(x=10,size=3,replace=F)
pruebabin = as.binary(prueba)
pruebabin = as.binary(pruba)
dist=function(x,y){
z = x+y
return(sum(z))
}
dist(pruebabin[[1]],pruebabin[[2]])
mapply(FUN = dist,pruebabin,pruebabin)
mapply(FUN = dist(X,Y),X=pruebabin,Y=pruebabin)
mapply(FUN = dist,pruebabin,pruebabin)
mapply(function(x, y) {
return(sum(x+y))
}, pruebabin,pruebabin)
for(i %in% 1:3){}
for(i %in% 1:3){}
help(outer)
outer(pruebabin,pruebabin,FUN=dist)
outer(randomSubset,randomSubset,FUN=dist)
for(i %in% 1:n){print(i)}
for(i %in% 1:5){print(i)}
for(i %in% c(1:5)){print(i)}
for(i in c(1:5)){print(i)}
A = matrix(nrow=18,ncol = 18)
A
A = matrix(nrow=3,ncol = 3)
for(i in c(1:3)){
for(j in c(1:3)){
A[i,j]=dist(pruebabin[[i]],pruebabin[[j]])
}
}
A
function Checkdistance(x){
if(x>=5){return(1)}
return(0)
}
Checkdistance=function(x){
if(x>=5){return(1)}
return(0)
}
Checkdistance(4)
Checkdistance(7)
A
outer(A,FUN = Checkdistance())
function<-findCode(UpperBound,n,d){
randomSubset = sample(x=2^n,size=UpperBound,replace=F)
Binaries = as.binary(randomSubset)
A = matrix(nrow=UpperBound,ncol = UpperBound)
for(i in c(1:UpperBound)){
for(j in c(1:UpperBound)){
A[i,j]=dist(Binaries[[i]],Binaries[[j]])
if(A[i,j]<d){return(0)}
}
return(1)
}
}
findCode = function(UpperBound,n,d){
randomSubset = sample(x=2^n,size=UpperBound,replace=F)
Binaries = as.binary(randomSubset)
A = matrix(nrow=UpperBound,ncol = UpperBound)
for(i in c(1:UpperBound)){
for(j in c(1:UpperBound)){
A[i,j]=dist(Binaries[[i]],Binaries[[j]])
if(A[i,j]<d){return(0)}
}
return(1)
}
}
findCode(18,10,5)
densities = function(k,UpperBound,n,d){
count = 0
for(i in 1:k){
count = count + findCode(UpperBound,n,d)
}
return(count/k)
}
densities(1000,18,10,5)
densities(1000,17,10,5)
densities(1000,19,10,5)
library(data.table)
library(igraph)
library(ggplot2)
setwd("C:\\Users\\Daniel\\MasterThesis\\GraphProyects")
clas1 = rep(2,15)
clas2= rep(1,35)
clases = c(clas1,clas2)
recupera = fread("recupera.txt",sep = "," )
recupera = as.matrix(recupera)
graforecupera =  graph_from_adjacency_matrix(recupera, mode = "undirected",weighted=TRUE)
graforecupera = simplify(graforecupera,remove.loops = TRUE)
E(graforecupera)$color[E(graforecupera)$weight <= 0.4 ] <- 'forestgreen'
E(graforecupera)$color[E(graforecupera)$weight <= 0.6 & 0.4< E(graforecupera)$weight] <- 'orange'
E(graforecupera)$color[E(graforecupera)$weight <= 1 & 0.6 < E(graforecupera)$weight ] <- 'grey'
prettyColors <- c( "royalblue","darkgreen", "cyan")
V(graforecupera)$color <- prettyColors[clases]
plot(graforecupera, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.9,1.3),ylim=c(-0.9,0.8),edge.width=0.5)
title("Recovery with delta = 0")
legend(x=1, y=-0.5, c("weight<0.4","0.4<weight<0.6", "0.6<weight"),pch=21,col="#777777", pt.bg=c("forestgreen","orange","grey"), pt.cex=2, cex=.8, bty="n", ncol=1)
recupera = fread("recupera.txt",sep = "," )
recupera = as.matrix(recupera)
graforecupera =  graph_from_adjacency_matrix(recupera, mode = "undirected",weighted=TRUE)
graforecupera = simplify(graforecupera,remove.loops = TRUE)
E(graforecupera)$color[E(graforecupera)$weight <= 0.4 ] <- 'forestgreen'
E(graforecupera)$color[E(graforecupera)$weight <= 0.6 & 0.4< E(graforecupera)$weight] <- 'orange'
E(graforecupera)$color[E(graforecupera)$weight <= 1 & 0.6 < E(graforecupera)$weight ] <- 'grey'
prettyColors <- c( "royalblue","darkgreen", "cyan")
V(graforecupera)$color <- prettyColors[clases]
plot(graforecupera, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.9,1.3),ylim=c(-0.9,0.8),edge.width=0.5)
title("Recovery with delta = 14")
legend(x=1, y=-0.5, c("weight<0.4","0.4<weight<0.6", "0.6<weight"),pch=21,col="#777777", pt.bg=c("forestgreen","orange","grey"), pt.cex=2, cex=.8, bty="n", ncol=1)
#plot para grafo recuperado.
recupera = fread("recupera.txt",sep = "," )
recupera = as.matrix(recupera)
graforecupera =  graph_from_adjacency_matrix(recupera, mode = "undirected",weighted=TRUE)
graforecupera = simplify(graforecupera,remove.loops = TRUE)
E(graforecupera)$color[E(graforecupera)$weight <= 0.4 ] <- 'forestgreen'
E(graforecupera)$color[E(graforecupera)$weight <= 0.6 & 0.4< E(graforecupera)$weight] <- 'orange'
E(graforecupera)$color[E(graforecupera)$weight <= 1 & 0.6 < E(graforecupera)$weight ] <- 'grey'
prettyColors <- c( "royalblue","darkgreen", "cyan")
V(graforecupera)$color <- prettyColors[clases]
plot(graforecupera, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.9,1.3),ylim=c(-0.9,0.8),edge.width=0.5)
title("Recovery with delta = 11")
legend(x=1, y=-0.5, c("weight<0.4","0.4<weight<0.6", "0.6<weight"),pch=21,col="#777777", pt.bg=c("forestgreen","orange","grey"), pt.cex=2, cex=.8, bty="n", ncol=1)
#plot para grafo recuperado.
recupera = fread("recupera.txt",sep = "," )
recupera = as.matrix(recupera)
graforecupera =  graph_from_adjacency_matrix(recupera, mode = "undirected",weighted=TRUE)
graforecupera = simplify(graforecupera,remove.loops = TRUE)
E(graforecupera)$color[E(graforecupera)$weight <= 0.4 ] <- 'forestgreen'
E(graforecupera)$color[E(graforecupera)$weight <= 0.6 & 0.4< E(graforecupera)$weight] <- 'orange'
E(graforecupera)$color[E(graforecupera)$weight <= 1 & 0.6 < E(graforecupera)$weight ] <- 'grey'
prettyColors <- c( "royalblue","darkgreen", "cyan")
V(graforecupera)$color <- prettyColors[clases]
plot(graforecupera, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.9,1.3),ylim=c(-0.9,0.8),edge.width=0.5)
title("Recovery with delta = 11")
legend(x=1, y=-0.5, c("weight<0.4","0.4<weight<0.6", "0.6<weight"),pch=21,col="#777777", pt.bg=c("forestgreen","orange","grey"), pt.cex=2, cex=.8, bty="n", ncol=1)
recupera = fread("recupera.txt",sep = "," )
recupera = as.matrix(recupera)
graforecupera =  graph_from_adjacency_matrix(recupera, mode = "undirected",weighted=TRUE)
graforecupera = simplify(graforecupera,remove.loops = TRUE)
E(graforecupera)$color[E(graforecupera)$weight <= 0.4 ] <- 'forestgreen'
E(graforecupera)$color[E(graforecupera)$weight <= 0.6 & 0.4< E(graforecupera)$weight] <- 'orange'
E(graforecupera)$color[E(graforecupera)$weight <= 1 & 0.6 < E(graforecupera)$weight ] <- 'grey'
prettyColors <- c( "royalblue","darkgreen", "cyan")
V(graforecupera)$color <- prettyColors[clases]
plot(graforecupera, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.9,1.3),ylim=c(-0.9,0.8),edge.width=0.5)
title("Recovery with delta = 14")
legend(x=1, y=-0.5, c("weight<0.4","0.4<weight<0.6", "0.6<weight"),pch=21,col="#777777", pt.bg=c("forestgreen","orange","grey"), pt.cex=2, cex=.8, bty="n", ncol=1)
