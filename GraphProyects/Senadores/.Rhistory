darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva(delta,I,O,p,q,N,n))^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
revision = revisarPositiva(delta,I,O,p,q,N,n)
if(revision<=0)
{
return("VALORNEGATIVO")
}
valorNum = (2*delta+revision)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
calcularetaI(0.8,3,1.5,10)
calcularetaO(0.2,3,1.5,10)
-0.3*45+0.9*45
darProba(1.5,45,45,0.8,0.2,1,10)
darProba(1.5,45,45,0.7,0.2,1,10)
darProba(1.5,45,45,0.7,0.3,1,10)
darProba(1.5,45,45,0.9,0.3,1,10)
darProba(2,45,45,0.8,0.3,1,10)
darProba(5,45,45,0.8,0.3,1,10)
darProba(1,45,45,0.8,0.3,1,10)
exp(2)
exp(-2*161)
darProba(1.5,45,45,0.8,0.3,1,10)
exp(-85)
setwd("C:\\Users\\Daniel\\ProyectoSenado")
library(data.table)
datos<-fread("reporte_votacioncsv.csv")
setwd("C:\\Users\\Daniel\\ProyectoSenado")
getwd()
datos<-fread("reporte_votacioncsv.csv")
procesarDatos = function(votaciones){
#1 cambia la columna de voto por un factor
votaciones$voto = as.factor(votaciones$voto)
#2 cambia la columna de tema por un factor
votaciones$tema_principal = as.factor(votaciones$tema_principal)
votaciones$id_votacion= as.factor(votaciones$id_votacion)
votaciones$voto= as.factor(votaciones$voto)
return(votaciones)
}
datos= procesarDatos(datos)
datosSenadores = datos[datos$corporacion=="senado",]
rm(datos)
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))
p=p+1
print(p)
}
return(listaProyectos)
}
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))
p=p+1
print(p)
}
return(listaProyectos)
}
temas = unique(datosSenadores$tema_principal)
primeraRespuesta = CalcularSimilaridadTema("Economia",datosSenadores)
class(primeraRespuesta)
length(primeraRespuesta)
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos$p<-(simik+t(simik))
p=p+1
print(p)
}
return(listaProyectos)
}
primeraRespuesta = CalcularSimilaridadTema("Economia",datosSenadores)
View(datosSenadores[datosSenadores$tema_principal==Economia],)
View(datosSenadores[datosSenadores$tema_principal=="Economia"],)
summary(datosSenadores[datosSenadores$tema_principal=="Economia",]$id_proyecto)
datosSenadores$id_proyecto=as.factor(datosSenadores$id_proyecto)
summary(datosSenadores[datosSenadores$tema_principal=="Economia",]$id_proyecto)
primeraRespuesta$``
primeraRespuesta$p
View(datosSenadores)
summary(datosSenadores[datosSenadores$tema_principal=="Justicia",]$id_proyecto)
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))
p=p+1
print(p)
}
return(listaProyectos)
}
primeraRespuesta = CalcularSimilaridadTema("Justicia",datosSenadores)
class(primeraRespuesta[[1]])
class(primeraRespuesta[[2]])
mat1= primeraRespuesta[[1]]
unique(datosSenadores$id_congresista)
length(unique(datosSenadores$id_congresista))
sort(unique(datosSenadores$id_congresista))
datos<-fread("reporte_votacioncsv.csv")
datosRepresentantes = datos[datos$corporacion=="camara",]
View(mat1)
rm(list=ls())
setwd("C:\\Users\\Daniel\\ProyectoSenado")
datos<-fread("reporte_votacioncsv1213.csv")
procesarDatos = function(votaciones){
#1 cambia la columna de voto por un factor
votaciones$voto = as.factor(votaciones$voto)
#2 cambia la columna de tema por un factor
votaciones$tema_principal = as.factor(votaciones$tema_principal)
votaciones$id_votacion= as.factor(votaciones$id_votacion)
votaciones$voto= as.factor(votaciones$voto)
return(votaciones)
}
datos = procesarDatos(datos)
datosSenadores = datos[datos$corporacion=="senado",]
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))
print(p)
p=p+1
}
return(listaProyectos)
}
temas = unique(datosSenadores$tema_principal)
temas
MasProyectos= function(){
temas = unique(datosSenadores$tema_principal)
maxiProyectos = c()
for(i in temas){
votacionesTema = datosSenadores[datosSenadores$tema_principal==i,]
totalProyectos = length(unique(votacionesTema$id_proyecto))
maxiProyectos = c(maxiProyectos,i)
}
return(maxiProyectos)
}
maxipro= MasProyectos()
MasProyectos= function(){
temas = unique(datosSenadores$tema_principal)
maxiProyectos = c()
for(i in temas){
votacionesTema = datosSenadores[datosSenadores$tema_principal==i,]
totalProyectos = length(unique(votacionesTema$id_proyecto))
maxiProyectos = c(maxiProyectos,totalProyectos)
}
return(maxiProyectos)
}
maxipro= MasProyectos()
maxipro
rm(temas)
MasProyectos= function(){
temas = unique(datosSenadores$tema_principal)
maxiProyectos = c()
for(i in temas){
votacionesTema = datosSenadores[datosSenadores$tema_principal==i,]
totalProyectos = length(unique(votacionesTema$id_proyecto))
maxiProyectos = c(maxiProyectos,totalProyectos)
}
return(maxiProyectos)
}
maxipro= MasProyectos()
unique(datosSenadores$tema_principal)
unique(datosSenadores[datosSenadores$tema_principal=="Economia",]$id_proyecto)
grafosEconomia = CalcularSimilaridadTema("Economia",datosSenadores)
mat1 = grafosEconomia[[1]]
for(i in 1:3){print("hola "+i)}
for(i in 1:3){print("hola "+"#i")}
"hola"+" perro"
paste0("hola",i)
for(i in 1:3){print(paste0("hola",i))}
for( i in 1:length(grafosEconomia)){print(length(grafosEconomia[[i]]))}
paste0("proyecto",i,".txt")
diag(nrow = 4,ncol = 4)
setwd("C:\\Users\\Daniel\\MasterThesis\\GraphProyects\\Senadores")
rm(list=ls())
datos<-fread("reporte_votacioncsv1213.csv")
procesarDatos = function(votaciones){
#1 cambia la columna de voto por un factor
votaciones$voto = as.factor(votaciones$voto)
#2 cambia la columna de tema por un factor
votaciones$tema_principal = as.factor(votaciones$tema_principal)
votaciones$id_votacion= as.factor(votaciones$id_votacion)
votaciones$voto= as.factor(votaciones$voto)
return(votaciones)
}
datos=procesarDatos(datos)
datosSenadores = datos[datos$corporacion=="senado",]
(datos)
rm(datos)
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))+diag(nrow=length(congresistas),ncol=length(congresistas))
print(p)
p=p+1
}
return(listaProyectos)
}
ConstruirTodosGrafos = function(votaciones){
temas = unique(votaciones$tema_principal)
for(i in temas){
GrafosActuales = CalcularSimilaridadTema(i,votaciones)
for(j in length(GrafosActuales)){
matActual=GrafosActuales[[j]]
write.table(matActual, file=paste0("proyecto",i,j,".txt"), row.names=FALSE, col.names=FALSE)
}
}
}
grafosEconomia = CalcularSimilaridadTema("Economia",datosSenadores)
mat1 = grafosEconomia[[1]]
mat2 = grafosEconomia[[2]]
mat3 = grafosEconomia[[3]]
mat4 = grafosEconomia[[4]]
write.table(mat1, file="Economia1.txt", row.names=FALSE, col.names=FALSE)
write.table(mat2, file="Economia2.txt", row.names=FALSE, col.names=FALSE)
write.table(mat3, file="Economia3.txt", row.names=FALSE, col.names=FALSE)
write.table(mat4, file="Economia4.txt", row.names=FALSE, col.names=FALSE)
ConstruirTodosGrafos(datosSenadores)
View(mat1)
CalcularSimilaridadTema=function(tema,votaciones)
{
#hace el subset al tema requerido
votacionesTema = votaciones[votaciones$tema_principal==tema,]
congresistas =  unique(votaciones$id_congresista)
ordenados = sort(congresistas)
similaridad = matrix(0,nrow =length(ordenados),ncol = length(ordenados))
proyectos = unique(votacionesTema$id_proyecto)
proyectosTotales = length(proyectos)
listaProyectos <- vector("list", proyectosTotales)
p =1
for(k in proyectos)
{
simik = similaridad
proyecto = votacionesTema[votacionesTema$id_proyecto==k,]
for(i in 1:length(ordenados))
{
for(j in 1:i-1)
{
congrei = congresistas[i]
congrej = congresistas[j]
votosi=proyecto[proyecto$id_congresista==congrei,]
votosj=proyecto[proyecto$id_congresista==congrej,]
if(nrow(votosi)>0 && nrow(votosj)>0)
{
votoi =names(sort(summary(votosi$voto),decreasing = T)[1])
votoj =names(sort(summary(votosj$voto),decreasing = T)[1])
if(votoi==votoj)
{
simik[i,j]=1
}
}
}
}
listaProyectos[[p]]<-(simik+t(simik))+diag(nrow=length(congresistas),ncol=length(congresistas))
#print(p)
p=p+1
}
return(listaProyectos)
}
ConstruirTodosGrafos = function(votaciones){
temas = unique(votaciones$tema_principal)
for(i in temas){
GrafosActuales = CalcularSimilaridadTema(i,votaciones)
for(j in length(GrafosActuales)){
matActual=GrafosActuales[[j]]
write.table(matActual, file=paste0("proyecto",i,j,".txt"), row.names=FALSE, col.names=FALSE)
print(paste0("proyecto",i,j,".txt"))
}
}
}
ConstruirTodosGrafos(datosSenadores)
ConstruirTodosGrafos = function(votaciones){
temas = unique(votaciones$tema_principal)
for(i in temas){
GrafosActuales = CalcularSimilaridadTema(i,votaciones)
print(length(paste0(GrafosActuales,i)))
for(j in length(GrafosActuales)){
matActual=GrafosActuales[[j]]
write.table(matActual, file=paste0("proyecto",i,j,".txt"), row.names=FALSE, col.names=FALSE)
print(paste0("proyecto",i,j,".txt"))
}
}
}
ConstruirTodosGrafos(datosSenadores)
ConstruirTodosGrafos = function(votaciones){
temas = unique(votaciones$tema_principal)
for(i in temas){
GrafosActuales = CalcularSimilaridadTema(i,votaciones)
print(paste0(length(GrafosActuales),i))
for(j in length(GrafosActuales)){
matActual=GrafosActuales[[j]]
write.table(matActual, file=paste0("proyecto",i,j,".txt"), row.names=FALSE, col.names=FALSE)
print(paste0("proyecto",i,j,".txt"))
}
}
}
ConstruirTodosGrafos(datosSenadores)
ConstruirTodosGrafos = function(votaciones){
temas = unique(votaciones$tema_principal)
for(i in temas){
GrafosActuales = CalcularSimilaridadTema(i,votaciones)
print(paste0(length(GrafosActuales),i))
for(j in 1:length(GrafosActuales)){
matActual=GrafosActuales[[j]]
write.table(matActual, file=paste0("proyecto",i,j,".txt"), row.names=FALSE, col.names=FALSE)
print(paste0("proyecto",i,j,".txt"))
}
}
}
ConstruirTodosGrafos(datosSenadores)
mat5 = fread("proyectoConflicto armado1.txt")
View(mat5)
