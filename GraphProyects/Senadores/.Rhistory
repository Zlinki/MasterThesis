A = matrix(c(1,2,3,4),nrow = 2,ncol = 2)
A
A = matrix(c(1,2,3,4),nrow = 2,ncol = 2,byrow = T)
A
svd(A)
A = matrix(c(1.5,2,3,4),nrow = 2,ncol = 2,byrow = T)
A
svd(A)
A = matrix(c(-0.6,0.8,0.8,0.6),nrow = 2,ncol = 2,byrow = T)
A
spectral.norm(A)
spectral.norm(A)
install.packages("matrixcalc")
library(matrixcalc)
spectral.norm(A)
A = matrix(c(-0.6,0.8,0.8,1.2),nrow = 2,ncol = 2,byrow = T)
A
spectral.norm(A)
A = matrix(c(-0.6,1.1,1.1,0.6),nrow = 2,ncol = 2,byrow = T)
A
spectral.norm(A)
A
max(A)
A = matrix(c(-0.6,0.8,0.8,0.6),nrow = 2,ncol = 2,byrow = T)
A = matrix(c(-0.6,0.8,0.8,0.6),nrow = 2,ncol = 2,byrow = T)
A
a = runif(1,min=0,max=5)
b = runif(1,min=0,max=5)
d = runif(1,min=0,max=5)
e = runif(1,min=0,max=5)
X = matrix(c(a,b,d,e),nrow = 2,ncol = 2,byrow = T)
W = A*X
W
c=0
i=0
while(c=0){
a = runif(1,min=0,max=5)
b = runif(1,min=0,max=5)
d = runif(1,min=0,max=5)
e = runif(1,min=0,max=5)
X = matrix(c(a,b,d,e),nrow = 2,ncol = 2,byrow = T)
W = A*X
if(spectral.norm(W)<=1 && max(W)>1){
print(X)
break
}
i=i+1
print(i)
if(i>10000)
break
}
c=0
i=0
while(c==0){
a = runif(1,min=0,max=5)
b = runif(1,min=0,max=5)
d = runif(1,min=0,max=5)
e = runif(1,min=0,max=5)
X = matrix(c(a,b,d,e),nrow = 2,ncol = 2,byrow = T)
W = A*X
if(spectral.norm(W)<=1 && max(W)>1){
print(X)
break
}
i=i+1
print(i)
if(i>10000)
break
}
c=0
i=0
while(c==0){
a = runif(1,min=0,max=1)
b = runif(1,min=0,max=1)
d = runif(1,min=0,max=1)
e = runif(1,min=0,max=1)
X = matrix(c(a,b,d,e),nrow = 2,ncol = 2,byrow = T)
W = A*X
if(spectral.norm(W)<=1 && max(W)>1){
print(X)
break
}
i=i+1
print(i)
if(i>20000)
break
}
X = matrix(c(4,0,4,0),nrow=2,byrow=TRUE)
X
X = matrix(c(4,0,0,4),nrow=2,byrow=TRUE)
norm(x,type="2")
norm(X,type="2")
eigen(X)
X = matrix(c(2,0,0,4),nrow=2,byrow=TRUE)
norm(X,type="2")
X
X = matrix(c(5.5,1,1,7),nrow=2,byrow=TRUE)
norm(X,type="2")
X = matrix(c(2,0,0,2),nrow = 2,byrow=T)
X
svd(X)
sum(svd(x)$d)
sum(svd(X)$d)
X = matrix(c(7,1.5,1.5,4),nrow = 2,byrow=T)
X
sum(svd(X)$d)
nombres=c("a,a,a,a","b","b","c","c","c")
letra= c("z,z,z,n,n,z,n,n,z")
dataf=data.frame(nombres,letra)
View(dataf)
nombres
nombres=c("a","a","a","a","b","b","c","c","c")
letra= c("z","z","z","n","n","z","n","n","z")
dataf=data.frame(nombres,letra)
View(dataf)
library(data.table)
dataf=as.data.table(dataf)
prueba=C("z","z","z","n")
prueba=c("z","z","z","n")
prueba=as.factor(prueba)
prueba
summary(prueba)
class(summary(prueba))
summary(prueba)[1]
summary(prueba)[2]
function defVals(x)
{
summary(as.factor(x))
}
#x es una lista.
function defVals(x):
{
summary(as.factor(x))
}
defvals=function(x){
summary(as.factor(x))
}
defvals(prueba)
class(defvals())
class(defvals(prueba))
dataf[,defvals(letra),by=nombres]
list(defvals(prueba))
array(defvals(prueba))
defvals(prueba)
datos = as.data.frame(dataf)
data.frame(table(datos$nombres))
data.frame(table(datos$nombres.letras))
data.frame(table(datos$nombres,datos$letra))
library(plyr)
count(datos,"letra")
count(datos,c("letra","nombres"))
ddply(datos,"nombres",fun=defvals)
ddply(datos,"nombres",fun=count(defvals))
ddply(datos,"nombres",fun=count(letra))
help(group_by)
> ddply(datos, nombres, summarize, freq=length(x))
ddply(datos, nombres, summarize, freq=length(x))
ddply(datos, nombres, summarize, freq=length(letra))
ddply(datos, "nombres", summarize, freq=length(letra))
ddply(datos, .(nombres), summarise, val = count(letra))
ddply(datos, .(nombres), summarise,)
ddply(datos, .(nombres), summarise)
dataf[,defvals,by=nombres]
dataf=data.table(datos)
dataf
dataf[,defvals,by=nombres]
dataf[,defvals,by=nombres]
defvals=function(x){
summary(as.factor(x))
}
nombres=c("a","a","a","a","b","b","c","c","c")
letra= c("z","z","z","n","n","z","n","n","z")
dataf=data.frame(nombres,letra)
dataf=as.data.table(dataf)
dataf[,defvals,by=nombres]
dataf[,defvals(letra),by=nombres]
install.packages(dummies)
install.packages("dummies")
library(dummies)
dataf[,defvals(letra),by=nombres]
dummy(V1,dataf[,defvals(letra),by=nombres])
dummy("V1",dataf[,defvals(letra),by=nombres])
dummy("letra",dataf[,defvals(letra),by=nombres])
dummy("nombres",dataf[,defvals(letra),by=nombres])
dataf[,levels(letra),by=nombres]
help("reshape")
reshape(datos,varying="letras")
reshape(datos,idvar="nombres",direction="long")
reshape(datos,varying="letras",idvar="nombres",direction="long")
reshape(datos,varying=NULL,idvar="nombres",direction="long")
reshape(datos,varying=,idvar="nombres",direction="wide")
reshape(datos,varying=NULL,idvar="nombres",direction="wide")
reshape(datos,varying="letras",idvar="nombres",direction="wide")
install.packages("reshape")
library(reshape)
cast(datos, nombres~letras, count)
mdata <- melt(datos, id="nombres")
cast(mdata, nombres~letras, count)
mdata
datos
cast(mdata, nombres~value, count)
cast(mdata, nombres~value, count())
cast(mdata, nombres~value, sum)
cast(mdata, nombres~value, summary)
reshape(datos,varying="letras",direction="wide")
reshape(datos,varying="letras",timevar = "letras",direction="wide")
summary.list(datso$letra)
summarise(letras)
summarise(datos)
summary(as.factor(datos))
summary(as.factor(datos$letra))
summary[1]
a = summary(datos$nombres=="a","letras")
a
datos[datos$nombres=="a","letras"]
datos[datos$nombres=="a",]
datos[datos$nombres=="a","letra"]
summary(datos[datos$nombres=="a","letra"])
class(summary(datos[datos$nombres=="a","letra"]))
a=summary(datos[datos$nombres=="a","letra"])
a
a[1]
a[2]
a[1][1]
a[1]
a[[1]]
a[[2]]
a
unlist(a)
list(a)
papas= c("a","b","c")
papas
col1 = summary(datos[datos$nombres=="a","letra"])
col2 = summary(datos[datos$nombres=="b","letra"])
col3 = summary(datos[datos$nombres=="c","letra"])
col3
View(dataf)
z = c(3,1,2)
c= c(1,1,2)
asdf = data.frame(papas,z,c)
View(asdf)
datos
datos=as.data.table(datos)
datos
as.data.frame(datos[,count(letra),by=nombres])
blib=as.data.frame(datos[,count(letra),by=nombres])
blib
as.matrix(blib)
blib=as.data.frame(datos[,count(letra),by=nombres])
blibk
blib
aggregate(blib,by=nombres)
aggregate(blib,by=nombres,fun=count)
aggregate(blib,by=nombres,FUN=count)
aggregate(blib,by="nombres",FUN=count)
aggregate(blib,by=c("nombres"),FUN=count)
aggregate(blib,by=c(nombres),FUN=count)
aggregate(blib,by=list(nombres),FUN=count)
blib
model.matrix( ~ nombres - 1, data=blib )
model.matrix( ~ letras - 1, data=blib )
blib
model.matrix( ~ x - 1, data=blib )
model.matrix( ~ freq - 1, data=blib )
blib
aggregate(blib$nombres, by=list(Category=x$Category), FUN=sum)
aggregate(blib$nombres, by=list(Category=blib$x), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=sum)
aggregate(blib$x, by=list(nombres=blib$nombres), FUN=count)
blib
aggregate(. ~ nombres,freq , FUN=count)
ddply(dd, c("dim1","dim2"), function(df)mean(df$v1))
reshape(blib)
reshape(blib,direction = "wide")
reshape(blib,direction = "wide",varying="x")
reshape(blib,direction = "wide",varying=x)
datos
blyb
blib
View(datos)
View(datos)
datos$nombres
datos$letra
blib
floor(0.5)
floor(0.7)
floor(1.2)
pbinom(1,1,1)
pbinom(10,1,1)
pbinom(0.7,1,1)
pbinom(0.7,0.5,1)
pbinom(0.7,1,0.5)
}
darProba=function(I,O,p,q,N,delta,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
revisarPositiva =function(delta,I,O,p,q){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
}
return(2*delta +sumaI + sumaO)
}
calcularetaO=function(q,N,delta,n)
{
d =floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*2 +2*delta/n))
}
calcularetaO=function(q,N,delta,n)
{
d =floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*q +2*delta/n))
}
calcularetaI=function(p,N,delta,n)
{
floor(d =N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
calcularetaI=function(p,N,delta,n)
{
d=floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
}
darProba=function(I,O,p,q,N,delta,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
calcularetaI=function(p,N,delta,n){
#d=floor(N*(2*delta+n)/2n)
#probaw = pbinom(d,N,p)
#multi = (1-2*p)
#return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2n)
#probaw = pbinom(d,N,p)
#multi = (1-2*p)
#return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
2/2
2\2
calcularetaI=function(p,N,delta,n){
d=floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,p)
multi = (1-2*p)
return(probaw*(1-2*p +2*delta/n))
return(1+1)
}
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(pro
baw*(1-2*q +2*delta/n))
}
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*p)
return(probaw*(1-2*q +2*delta/n))
}
revisarPositiva(1.5,45,45,0.8,0.2)
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
revisarPositiva =function(delta,I,O,p,q,N,n){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
}
return(2*delta +sumaI + sumaO)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
revisarPositiva =function(delta,I,O,p,q,N,n){
sumaI = 0
i = 1
while (i<=I)
{
sumaI = sumaI + calcularetaI(p,N,delta,n)
i=i+1
}
sumaO = 0
j = 1
while (j<=O)
{
sumaO = sumaO + calcularetaO(q,N,delta,n)
j=j+1
}
return(2*delta +sumaI + sumaO)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
calcularetaO=function(q,N,delta,n){
d =floor(N*(2*delta+n)/2*n)
probaw = pbinom(d,N,q)
multi = (1-2*q)
return(probaw*(1-2*q +2*delta/n))
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
valorNum = (2*delta+revisarPositiva(delta,I,O,p,q,N,n))^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
darProba(1.5,45,45,0.8,0.2,3,10)
darProba=function(delta,I,O,p,q,N,n){
revision = revisarPositiva(delta,I,O,p,q,N,n)
if(revision<=0)
{
return("VALORNEGATIVO")
}
valorNum = (2*delta+revision)^2
valorDenum = (2+(4*delta)/n )^2
return(valorNum/valorDenum)
}
revisarPositiva(1.5,45,45,0.8,0.2,3,10)
calcularetaI(0.8,3,1.5,10)
calcularetaO(0.2,3,1.5,10)
-0.3*45+0.9*45
darProba(1.5,45,45,0.8,0.2,1,10)
darProba(1.5,45,45,0.7,0.2,1,10)
darProba(1.5,45,45,0.7,0.3,1,10)
darProba(1.5,45,45,0.9,0.3,1,10)
darProba(2,45,45,0.8,0.3,1,10)
darProba(5,45,45,0.8,0.3,1,10)
darProba(1,45,45,0.8,0.3,1,10)
exp(2)
exp(-2*161)
darProba(1.5,45,45,0.8,0.3,1,10)
exp(-85)
mat1 = matrix(runif(200), 10)
mat1 = matrix(runif(100000000),nrow = 10000,ncol = 10000)
mat1=matrix(data = runif(1000000),nrow = 1000,ncol = 1000)
svd(mat1)
mat1=matrix(data = runif(1000000),nrow = 1000,ncol = 1000)
start.time <- Sys.time()
papa=svd(mat1)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
"data.table",
"expm",
"ggplot2",
"igraph",
"matlib",
"Matrix",
"statnet",
"R.utils")
lapply(packs, require, character.only = TRUE)
packs= c(
"data.table",
"expm",
"ggplot2",
"igraph",
"matlib",
"Matrix",
"statnet",
"R.utils")
lapply(packs, require, character.only = TRUE)
setwd("C:\\Users\\Daniel\\MasterThesis\\GraphProyects\\Senadores")
mat = fread("EcoRecovered.txt",sep = "," )
mat=as.matrix(mat)
red1 = graph_from_adjacency_matrix(mat, mode = "undirected")
intento2 = simplify(red1,remove.loops = TRUE)
V(intento2)$color<-colores
intento2 = simplify(red1,remove.loops = TRUE)
col = fread
col = fread("CongresistasConPartido.csv")
View(col)
colores=as.array(col$V4)
V(intento2)$color<-colores
plot(intento2, vertex.size=6, vertex.label=NA,rescale=T,xlim=c(-0.7,1.1),ylim=c(-0.9,0.8),edge.width=0.5)
legend(x=1, y=-0.5, c("Derecha","centro", "izquierda","otros"),pch=21,col="#777777", pt.bg=c("blue","green","red","pink"), pt.cex=2, cex=.8, bty="n", ncol=1)
